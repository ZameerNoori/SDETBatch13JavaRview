What is PolyMorphism:
Polymorphism is the ability of a method to behave differently depending upon the object or parameters that we pass
to a method. When we pass different parameters to a method and it behaves differently then it is called static
Polymorphism or compile time Polymorphism or early binding. When we achieve the polymorphism through method overriding
then it is called run time Polymorphism or dynamic binding or late binding.

Why we should use Polymorphism:
1) cleaner code.
2) we never prefer to change the existing code if we want to improve something we always want to create new methods and
new classes. We can call these methods using the parent classes variable/reference.
3) we can call multiple methods form many classes with the help of a single variable. Like we can create the array of
objects and with the help of a loop will be able to call all the methods from all the classes.

How can we Polymorphism?
1) Create a parent child relationship.
2) Override the methods in the child classes.
3) Create the array of all the child class objects and with the help of loop you can call all the methods from all the
child classes.

Rules:
1) All the rules that apply for overriding also apply for the Polymorphism.
2) We can store the object of a child class inside a variable of type parent class but we can't do the reverse.
3) We can also create arrays of type parent and they can hold the objects of child classes.
========================================================================================================================
What is abstraction:
  Abstract is providing only the necessary details and hiding
    all implementations details.
Why should we learn Abstraction:
    1) it reduces the code complexity by separating the idea from implementation.
    2) It helps use enforce rules and convey our requirements.
How can we use Abstraction:
    1) create classes with abstract keyword.
    2) use the abstract keyword with method header and don't
    provide the body of that method inside the parent class.
    3) Create the child classes and extend those classes from the parent class and implement the abstract methods
    4) if we don't want to provide the implementation one or more methods
    we can declare the child class as abstract as well.
    5)
